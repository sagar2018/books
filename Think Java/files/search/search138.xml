120:@0.218575:0.131763:0.251540:0.131763:0.251540:0.118359:0.218575:0.118359:0.010988:0.010988:0.010988
Chapter 9. Mutable objects:@0.577319:0.131763:0.853457:0.131763:0.853457:0.118359:0.577319:0.118359:0.015872:0.012209:0.010683:0.012209:0.008546:0.010027:0.008976:0.007325:0.010988:0.006105:0.017093:0.020845:0.012209:0.008546:0.010683:0.012209:0.006105:0.010027:0.007325:0.010988:0.013440:0.006714:0.010027:0.009767:0.008546:0.008669
BigInteger small = BigInteger.valueOf(17);:@0.306603:0.172250:0.728793:0.172250:0.728793:0.159676:0.306603:0.159676:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010060:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
BigInteger big = BigInteger.valueOf(1700000000);:@0.306603:0.190855:0.789108:0.190855:0.789108:0.178281:0.306603:0.178281:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010060:0.010052:0.010060:0.010052:0.010033:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
BigInteger total = small.add(big);:@0.306603:0.209460:0.648373:0.209460:0.648373:0.196886:0.306603:0.196886:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010060:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
Try out some of the other methods, like:@0.266394:0.228707:0.600284:0.228707:0.600284:0.215303:0.266394:0.215303:0.012213:0.007439:0.010095:0.006388:0.009564:0.010627:0.007439:0.006368:0.007544:0.009564:0.015940:0.008501:0.006368:0.009564:0.005845:0.006388:0.007439:0.010627:0.008501:0.006368:0.009564:0.007439:0.010627:0.008501:0.007439:0.006368:0.015940:0.008501:0.007439:0.010627:0.010092:0.010627:0.007544:0.005313:0.006388:0.005313:0.005313:0.009568:0.008501
multiply:@0.606650:0.229130:0.687071:0.229130:0.687071:0.216556:0.606650:0.216556:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
and:@0.693443:0.228707:0.724261:0.228707:0.724261:0.215303:0.693443:0.215303:0.009564:0.010627:0.010627
pow:@0.730636:0.229130:0.760793:0.229130:0.760793:0.216556:0.730636:0.216556:0.010052:0.010052:0.010052
.:@0.760792:0.228707:0.766106:0.228707:0.766106:0.215303:0.760792:0.215303:0.005313
7. Convert:@0.241954:0.259505:0.332810:0.259505:0.332810:0.246101:0.241954:0.246101:0.009564:0.005313:0.009572:0.013795:0.009564:0.010099:0.009568:0.008501:0.007439:0.007439
factorial:@0.337600:0.259928:0.428072:0.259928:0.428072:0.247354:0.337600:0.247354:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
so that it performs its calculation using BigIntegers:@0.432859:0.259505:0.853448:0.259505:0.853448:0.246101:0.432859:0.246101:0.007544:0.009564:0.004786:0.007439:0.010627:0.009564:0.007439:0.004786:0.005313:0.007439:0.004806:0.011154:0.008501:0.007439:0.005845:0.009564:0.007439:0.015940:0.007544:0.004786:0.005313:0.007439:0.007544:0.004786:0.008501:0.009564:0.005313:0.008501:0.010627:0.005313:0.009564:0.007439:0.005313:0.009564:0.010627:0.004786:0.010627:0.007544:0.005313:0.010627:0.009564:0.004786:0.013545:0.005313:0.009564:0.006900:0.010099:0.007439:0.008501:0.009564:0.008501:0.007439:0.007544
and returns a BigInteger as a result. You can leave the parameter:@0.266394:0.278110:0.853457:0.278110:0.853457:0.264706:0.266394:0.264706:0.009564:0.010627:0.010627:0.009064:0.007439:0.008501:0.007439:0.010627:0.007439:0.010627:0.007544:0.009064:0.009564:0.009064:0.013545:0.005313:0.009564:0.006900:0.010099:0.007439:0.008501:0.009564:0.008501:0.007439:0.009064:0.009564:0.007544:0.009064:0.009564:0.009064:0.007439:0.008501:0.007544:0.010627:0.005313:0.007439:0.005313:0.016585:0.012737:0.009564:0.010627:0.009064:0.008501:0.009564:0.010627:0.009064:0.005313:0.008501:0.009037:0.009568:0.008501:0.009064:0.007439:0.010627:0.008501:0.009064:0.010627:0.009564:0.007439:0.009564:0.015940:0.008501:0.007439:0.008501:0.007439
alone—it will still be an integer.:@0.266394:0.296715:0.536402:0.296715:0.536402:0.283311:0.266394:0.283311:0.009564:0.005313:0.009564:0.010627:0.008501:0.019128:0.005313:0.007439:0.006368:0.013815:0.005313:0.005313:0.005313:0.006388:0.007544:0.007439:0.005313:0.005313:0.005313:0.006368:0.011154:0.008501:0.006368:0.009564:0.010627:0.006388:0.005313:0.010099:0.007439:0.008482:0.009564:0.008501:0.007439:0.005313
8. Try printing the table again with your modiﬁed factorial method. Is:@0.241954:0.327514:0.853443:0.327514:0.853443:0.314110:0.241954:0.314110:0.009564:0.005313:0.009572:0.012213:0.007439:0.010095:0.007599:0.010627:0.007439:0.005313:0.010099:0.007439:0.005313:0.010627:0.009564:0.007599:0.007439:0.010627:0.008501:0.007599:0.007439:0.009564:0.010627:0.005313:0.008501:0.007599:0.009564:0.009564:0.009564:0.005313:0.010627:0.007599:0.013815:0.005313:0.007439:0.010627:0.007599:0.009568:0.009564:0.010627:0.007439:0.007599:0.015940:0.010092:0.010627:0.005313:0.010627:0.008501:0.010627:0.007618:0.005845:0.009564:0.008482:0.007439:0.009564:0.007439:0.005313:0.009564:0.005313:0.007618:0.015940:0.008501:0.007439:0.010607:0.010111:0.010627:0.005313:0.012170:0.006900:0.007544
it correct up to 30? How high can you make it go? I calculated the:@0.266394:0.346119:0.853445:0.346119:0.853445:0.332715:0.266394:0.332715:0.005313:0.007439:0.007677:0.008501:0.009564:0.007439:0.007439:0.008501:0.008501:0.007439:0.007658:0.010627:0.010627:0.007677:0.007439:0.009564:0.007677:0.009564:0.009564:0.009033:0.012385:0.014338:0.009037:0.013815:0.007677:0.010627:0.005313:0.009564:0.010627:0.007658:0.008501:0.009564:0.010627:0.007677:0.009568:0.009564:0.010627:0.007677:0.015921:0.009564:0.009568:0.008501:0.007677:0.005313:0.007439:0.007677:0.009564:0.009564:0.009033:0.012385:0.006900:0.007677:0.008501:0.009564:0.005313:0.008501:0.010627:0.005313:0.009564:0.007439:0.008501:0.010627:0.007658:0.007439:0.010627:0.008501
factorial of all the numbers from 0 to 999, but my machine is pretty:@0.266394:0.364723:0.853449:0.364723:0.853449:0.351318:0.266394:0.351318:0.005845:0.009564:0.008501:0.007439:0.009564:0.007439:0.005313:0.009564:0.005313:0.007638:0.009564:0.005845:0.007638:0.009564:0.005313:0.005313:0.007638:0.007439:0.010627:0.008501:0.007638:0.010099:0.010627:0.015393:0.011174:0.008501:0.007439:0.007544:0.007638:0.005845:0.007439:0.009564:0.015940:0.007638:0.009564:0.007638:0.007439:0.009564:0.007638:0.009564:0.009564:0.009564:0.005313:0.007951:0.010627:0.010627:0.007439:0.007638:0.015413:0.010095:0.007638:0.015940:0.009564:0.007955:0.010627:0.005313:0.010627:0.008501:0.007638:0.005313:0.007544:0.007638:0.010627:0.007439:0.008501:0.007439:0.006911:0.010095
slow, so it took a while. The last number, 999!, has 2565 digits.:@0.266394:0.383327:0.799299:0.383327:0.799299:0.369923:0.266394:0.369923:0.007544:0.005313:0.009037:0.013815:0.005313:0.006368:0.007544:0.009564:0.006388:0.005313:0.007439:0.006368:0.007439:0.010092:0.009564:0.010095:0.006368:0.009564:0.006388:0.013815:0.010627:0.005313:0.005313:0.008501:0.005313:0.008498:0.013815:0.010627:0.008501:0.006368:0.005313:0.009564:0.007544:0.007439:0.006368:0.010099:0.010627:0.015413:0.011154:0.008501:0.007439:0.005313:0.006368:0.009564:0.009564:0.009564:0.005313:0.005313:0.006388:0.010627:0.009564:0.007544:0.006368:0.009564:0.009564:0.009564:0.009564:0.006368:0.010627:0.005313:0.009564:0.005313:0.007439:0.007544:0.005313
Exercise 9.5.:@0.218575:0.413358:0.341712:0.413358:0.341712:0.399953:0.218575:0.399953:0.014424:0.011598:0.010027:0.008976:0.009767:0.006105:0.008669:0.010027:0.009357:0.010988:0.006105:0.010988:0.006105
Many encryption techniques depend on the ability to raise:@0.349840:0.413358:0.853458:0.413358:0.853458:0.399953:0.349840:0.399953:0.017526:0.009564:0.010099:0.010095:0.008126:0.008501:0.010627:0.008501:0.007439:0.010095:0.010627:0.007439:0.005313:0.009564:0.010627:0.008126:0.007439:0.008501:0.007974:0.010627:0.010627:0.005313:0.010095:0.010627:0.008501:0.007544:0.008126:0.010627:0.008501:0.011154:0.008501:0.010627:0.010627:0.008146:0.009564:0.010627:0.008126:0.007439:0.010627:0.008501:0.008126:0.009564:0.010627:0.005313:0.005313:0.005313:0.006911:0.010095:0.008126:0.007439:0.009564:0.008146:0.007439:0.009564:0.005313:0.007544:0.008501
large integers to an integer power. Here is a method that implements a:@0.218575:0.431963:0.853455:0.431963:0.853455:0.418558:0.218575:0.418558:0.005313:0.009564:0.007439:0.009564:0.008501:0.009123:0.005313:0.010099:0.007439:0.008501:0.009564:0.008482:0.007439:0.007544:0.009123:0.007439:0.009564:0.009123:0.009564:0.010627:0.009123:0.005313:0.010099:0.007439:0.008501:0.009564:0.008501:0.007439:0.009123:0.011154:0.009037:0.013268:0.008501:0.007439:0.005313:0.016741:0.014338:0.008501:0.007439:0.008501:0.009123:0.005313:0.007544:0.009123:0.009564:0.009123:0.015940:0.008482:0.007439:0.010627:0.010111:0.010627:0.009103:0.007439:0.010627:0.009564:0.007439:0.009123:0.005313:0.015940:0.010627:0.005313:0.008501:0.015940:0.008501:0.010099:0.007439:0.007544:0.009123:0.009564
(reasonably) fast technique for integer exponentiation::@0.218575:0.450566:0.673072:0.450566:0.673072:0.437162:0.218575:0.437162:0.007439:0.007439:0.008501:0.009564:0.007544:0.009564:0.010627:0.009564:0.010627:0.005313:0.010095:0.007439:0.006368:0.005845:0.009564:0.007544:0.007439:0.006388:0.007439:0.008501:0.007955:0.010627:0.010627:0.005313:0.010095:0.010627:0.008501:0.006388:0.005845:0.009564:0.007439:0.006368:0.005313:0.010099:0.007439:0.008501:0.009564:0.008501:0.007439:0.006368:0.008501:0.010095:0.011154:0.009564:0.010627:0.008501:0.010099:0.007439:0.005313:0.009564:0.007439:0.005313:0.009564:0.010627:0.005313
public static int:@0.218575:0.474625:0.389464:0.474625:0.389464:0.462051:0.218575:0.462051:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010060:0.010033:0.010052:0.010052:0.010052:0.010052:0.010052:0.010060:0.010052:0.010052:0.010052
pow(:@0.399525:0.474625:0.439715:0.474625:0.439715:0.462051:0.399525:0.462051:0.010052:0.010033:0.010052:0.010052
int:@0.439715:0.474625:0.469873:0.474625:0.469873:0.462051:0.439715:0.462051:0.010052:0.010052:0.010052
x,:@0.479933:0.474625:0.500038:0.474625:0.500038:0.462051:0.479933:0.462051:0.010052:0.010052
int:@0.510098:0.474625:0.540256:0.474625:0.540256:0.462051:0.510098:0.462051:0.010052:0.010052:0.010052
n) {:@0.550297:0.474625:0.590515:0.474625:0.590515:0.462051:0.550297:0.462051:0.010052:0.010052:0.010060:0.010052
if:@0.258784:0.493230:0.278889:0.493230:0.278889:0.480656:0.258784:0.480656:0.010052:0.010052
(n == 0):@0.288950:0.493230:0.369366:0.493230:0.369366:0.480656:0.288950:0.480656:0.010052:0.010052:0.010041:0.010052:0.010052:0.010060:0.010052:0.010052
return:@0.379407:0.493230:0.439722:0.493230:0.439722:0.480656:0.379407:0.480656:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
1;:@0.449782:0.493230:0.469887:0.493230:0.469887:0.480656:0.449782:0.480656:0.010052:0.010052
// find x to the n/2 recursively:@0.258784:0.530440:0.580453:0.530440:0.580453:0.517865:0.258784:0.517865:0.010052:0.010052:0.010060:0.010052:0.010052:0.010052:0.010052:0.010041:0.010052:0.010060:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010060:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
int:@0.258784:0.549043:0.288942:0.549043:0.288942:0.536469:0.258784:0.536469:0.010052:0.010052:0.010052
t = pow(x, n/2);:@0.299002:0.549043:0.459827:0.549043:0.459827:0.536469:0.299002:0.536469:0.010052:0.010041:0.010052:0.010060:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052
// if n is even, the result is t squared:@0.258784:0.586253:0.660878:0.586253:0.660878:0.573679:0.258784:0.573679:0.010052:0.010052:0.010060:0.010052:0.010052:0.010041:0.010052:0.010060:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010060:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010060:0.010052:0.010052:0.010041:0.010052:0.010060:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
// if n is odd, the result is t squared times x:@0.258784:0.604857:0.731241:0.604857:0.731241:0.592283:0.258784:0.592283:0.010052:0.010052:0.010060:0.010052:0.010052:0.010041:0.010052:0.010060:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010060:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010060:0.010052:0.010052:0.010041:0.010052:0.010060:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010052:0.010052:0.010052:0.010060:0.010052
if:@0.258784:0.642066:0.278889:0.642066:0.278889:0.629492:0.258784:0.629492:0.010052:0.010052
(n%2 == 0) {:@0.288950:0.642066:0.409564:0.642066:0.409564:0.629492:0.288950:0.629492:0.010052:0.010052:0.010052:0.010052:0.010041:0.010052:0.010052:0.010060:0.010052:0.010052:0.010041:0.010052
return:@0.278889:0.660671:0.339204:0.660671:0.339204:0.648096:0.278889:0.648096:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
t*t;:@0.349245:0.660671:0.389455:0.660671:0.389455:0.648096:0.349245:0.648096:0.010052:0.010052:0.010052:0.010052
}:@0.258784:0.679275:0.268837:0.679275:0.268837:0.666701:0.258784:0.666701:0.010052
else:@0.278897:0.679275:0.319107:0.679275:0.319107:0.666701:0.278897:0.666701:0.010052:0.010052:0.010052:0.010052
{:@0.329148:0.679275:0.339201:0.679275:0.339201:0.666701:0.329148:0.666701:0.010052
return:@0.278889:0.697880:0.339204:0.697880:0.339204:0.685306:0.278889:0.685306:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
t*t*x;:@0.349245:0.697880:0.409560:0.697880:0.409560:0.685306:0.349245:0.685306:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
}:@0.258784:0.716485:0.268837:0.716485:0.268837:0.703911:0.258784:0.703911:0.010052
}:@0.218575:0.735089:0.228628:0.735089:0.228628:0.722514:0.218575:0.722514:0.010052
The problem with this method is that it only works if the result is smaller:@0.218575:0.758791:0.853451:0.758791:0.853451:0.745386:0.218575:0.745386:0.013815:0.010627:0.008501:0.007228:0.010627:0.007439:0.009564:0.010627:0.005313:0.008501:0.015940:0.007247:0.013815:0.005313:0.007439:0.010627:0.007228:0.007439:0.010627:0.005313:0.007544:0.007247:0.015940:0.008501:0.007439:0.010627:0.010092:0.010627:0.007228:0.005313:0.007544:0.007247:0.007439:0.010627:0.009564:0.007439:0.007228:0.005313:0.007439:0.007247:0.009564:0.010627:0.005313:0.010095:0.007228:0.013287:0.009564:0.007439:0.010095:0.007544:0.007228:0.005313:0.005845:0.007247:0.007439:0.010627:0.008501:0.007228:0.007439:0.008501:0.007544:0.010627:0.005313:0.007439:0.007247:0.005313:0.007544:0.007228:0.007544:0.015940:0.009564:0.005313:0.005313:0.008501:0.007439
than 2 billion. Rewrite it so that the result is a:@0.218575:0.777396:0.603798:0.777396:0.603798:0.763991:0.218575:0.763991:0.007439:0.010627:0.009564:0.010627:0.005118:0.009564:0.005118:0.010627:0.005313:0.005313:0.005313:0.005313:0.009564:0.010627:0.005313:0.008087:0.014077:0.008501:0.013815:0.007439:0.005313:0.007439:0.008501:0.005118:0.005313:0.007439:0.005118:0.007544:0.009564:0.005118:0.007439:0.010627:0.009564:0.007439:0.005118:0.007439:0.010627:0.008501:0.005118:0.007439:0.008501:0.007544:0.010627:0.005313:0.007439:0.005118:0.005313:0.007544:0.005118:0.009564
BigInteger:@0.608915:0.777818:0.709440:0.777818:0.709440:0.765244:0.608915:0.765244:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
. The parameters:@0.709438:0.777396:0.853459:0.777396:0.853459:0.763991:0.709438:0.763991:0.005313:0.008087:0.013815:0.010627:0.008501:0.005118:0.010627:0.009564:0.007439:0.009564:0.015940:0.008501:0.007439:0.008501:0.007439:0.007544
should still be integers, though.:@0.218575:0.796000:0.482426:0.796000:0.482426:0.782596:0.218575:0.782596:0.007544:0.010627:0.009564:0.010627:0.005313:0.010627:0.006368:0.007544:0.007439:0.005313:0.005313:0.005313:0.006388:0.011154:0.008501:0.006368:0.005313:0.010099:0.007439:0.008501:0.009564:0.008501:0.007439:0.007544:0.005313:0.006368:0.007439:0.010627:0.009564:0.010627:0.009564:0.010627:0.005313
You can use the BigInteger methods:@0.218575:0.825157:0.524886:0.825157:0.524886:0.811753:0.218575:0.811753:0.012737:0.009564:0.010627:0.006779:0.008501:0.009564:0.010627:0.006759:0.010627:0.007544:0.008501:0.006759:0.007439:0.010627:0.008501:0.006759:0.013545:0.005313:0.009564:0.006900:0.010099:0.007439:0.008501:0.009564:0.008501:0.007439:0.006759:0.015940:0.008501:0.007439:0.010627:0.010092:0.010627:0.007544
add:@0.531660:0.825580:0.561818:0.825580:0.561818:0.813006:0.531660:0.813006:0.010052:0.010052:0.010052
and:@0.568582:0.825157:0.599400:0.825157:0.599400:0.811753:0.568582:0.811753:0.009564:0.010627:0.010627
multiply:@0.606162:0.825580:0.686582:0.825580:0.686582:0.813006:0.606162:0.813006:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052:0.010052
, but don’t use:@0.686580:0.825157:0.811223:0.825157:0.811223:0.811753:0.686580:0.811753:0.005313:0.006857:0.010627:0.010627:0.007439:0.006759:0.010627:0.009564:0.010627:0.005313:0.007439:0.006779:0.010627:0.007544:0.008501
pow:@0.817980:0.825580:0.848138:0.825580:0.848138:0.813006:0.817980:0.813006:0.010052:0.010052:0.010052
,:@0.848137:0.825157:0.853451:0.825157:0.853451:0.811753:0.848137:0.811753:0.005313
which would spoil the fun.:@0.218575:0.843760:0.439711:0.843760:0.439711:0.830356:0.218575:0.830356:0.013815:0.010627:0.005313:0.007974:0.010627:0.006368:0.013287:0.009564:0.010627:0.005313:0.010627:0.006368:0.007544:0.011154:0.009564:0.005313:0.005313:0.006388:0.007439:0.010627:0.008501:0.006368:0.005845:0.010627:0.010627:0.005313