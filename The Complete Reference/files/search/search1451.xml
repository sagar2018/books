):@0.117647:0.111200:0.125482:0.111200:0.125482:0.094964:0.117647:0.094964:0.007835
 method has no effect on the common pool.:@0.125482:0.111200:0.533350:0.111200:0.533350:0.094673:0.125482:0.094673:0.005882:0.018291:0.010441:0.006526:0.011765:0.011765:0.011765:0.005882:0.011765:0.010441:0.009154:0.005882:0.011765:0.011765:0.005882:0.010441:0.007408:0.007831:0.010441:0.010441:0.006526:0.005882:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.011765:0.018291:0.018291:0.011765:0.011765:0.005882:0.011765:0.011765:0.011765:0.006526:0.005882
The Divide-and-Conquer Strategy:@0.117647:0.166407:0.598143:0.166407:0.598143:0.143676:0.117647:0.143676:0.021967:0.018309:0.014614:0.008235:0.023787:0.009136:0.016471:0.009136:0.018309:0.014614:0.010956:0.016471:0.018309:0.018309:0.010956:0.023787:0.016471:0.018309:0.018309:0.018309:0.014614:0.014026:0.008235:0.018309:0.010956:0.014614:0.016471:0.010956:0.014614:0.016471:0.016471
As a general rule, users of the Fork/Join Framework will employ a :@0.117647:0.195745:0.749283:0.195745:0.749283:0.179218:0.117647:0.179218:0.016985:0.009154:0.005882:0.010441:0.005882:0.011765:0.010441:0.011765:0.010441:0.007831:0.010441:0.006526:0.005882:0.007831:0.011765:0.006526:0.010441:0.005882:0.005882:0.011765:0.009154:0.010441:0.007831:0.009154:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.010441:0.005882:0.013070:0.011765:0.007831:0.011765:0.006526:0.009154:0.011765:0.006526:0.011765:0.005882:0.013070:0.007831:0.010441:0.018291:0.010441:0.016985:0.011765:0.007831:0.011765:0.005882:0.016985:0.006526:0.006526:0.006526:0.005882:0.010441:0.018291:0.011765:0.006526:0.011765:0.011765:0.005882:0.010441:0.005882
divide-and-:@0.749282:0.195745:0.857706:0.195745:0.857706:0.179200:0.749282:0.179200:0.011765:0.006526:0.010441:0.006526:0.011765:0.010441:0.007831:0.011765:0.011765:0.011765:0.007835
conquer:@0.117647:0.216655:0.194741:0.216655:0.194741:0.200109:0.117647:0.200109:0.010441:0.011765:0.011765:0.011765:0.011765:0.010441:0.009153
 strategy that is based on recursion. This is why the two subclasses of:@0.194741:0.216655:0.846694:0.216655:0.846694:0.200127:0.194741:0.200127:0.005882:0.009154:0.006526:0.007831:0.010441:0.006526:0.010441:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.006526:0.009154:0.005882:0.011765:0.010441:0.009154:0.010441:0.011765:0.005882:0.011765:0.011765:0.005882:0.007831:0.010441:0.010441:0.011765:0.007831:0.009154:0.006526:0.011765:0.011765:0.005882:0.005882:0.014357:0.011765:0.006526:0.009154:0.005882:0.006526:0.009154:0.005882:0.016985:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.006526:0.016985:0.011765:0.005882:0.009154:0.011765:0.011765:0.010441:0.006526:0.010441:0.009154:0.009154:0.010441:0.009154:0.005882:0.011765:0.007835
ForkJoinTask:@0.117647:0.237564:0.257935:0.237564:0.257935:0.221327:0.117647:0.221327:0.014357:0.011765:0.010441:0.013070:0.011765:0.011765:0.006526:0.013070:0.013529:0.011765:0.009154:0.013082
 are called :@0.257918:0.237564:0.360418:0.237564:0.360418:0.221036:0.257918:0.221036:0.005882:0.010441:0.007831:0.010441:0.005882:0.010441:0.010441:0.006526:0.006526:0.010441:0.011765:0.005882
RecursiveAction:@0.360424:0.237564:0.526318:0.237564:0.526318:0.221327:0.360424:0.221327:0.016985:0.010441:0.010441:0.013070:0.010441:0.009154:0.006526:0.011765:0.010441:0.016985:0.010441:0.007831:0.006526:0.011765:0.013082
 and :@0.526306:0.237564:0.572041:0.237564:0.572041:0.221036:0.526306:0.221036:0.005882:0.010441:0.011765:0.011765:0.005882
RecursiveTask:@0.572035:0.237564:0.718831:0.237564:0.718831:0.221327:0.572035:0.221327:0.016985:0.010441:0.010441:0.013070:0.010441:0.009154:0.006526:0.011765:0.010441:0.013529:0.011765:0.009154:0.013082
. It is anticipated:@0.718824:0.237564:0.875551:0.237564:0.875551:0.221036:0.718824:0.221036:0.005882:0.005882:0.007831:0.006526:0.005882:0.006526:0.009154:0.005882:0.010441:0.011765:0.006526:0.006526:0.010441:0.006526:0.011765:0.010441:0.006526:0.010441:0.011765
that you will extend one of these classes when creating your own fork/join task.:@0.117647:0.258473:0.867537:0.258473:0.867537:0.241945:0.117647:0.241945:0.006526:0.011765:0.010441:0.006526:0.005882:0.011765:0.011765:0.011765:0.005882:0.016985:0.006526:0.006526:0.006526:0.005882:0.010441:0.011765:0.006526:0.010441:0.011765:0.011765:0.005882:0.011765:0.011765:0.010441:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.010441:0.009154:0.010441:0.005882:0.010441:0.006526:0.010441:0.009154:0.009154:0.010441:0.009154:0.005882:0.016985:0.011765:0.010441:0.011765:0.005882:0.010441:0.007831:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.011765:0.011765:0.011765:0.007831:0.005882:0.011765:0.016985:0.011765:0.005882:0.007831:0.011765:0.007831:0.011765:0.006526:0.006526:0.011765:0.006526:0.011765:0.005882:0.006526:0.010441:0.009154:0.011765:0.005882
The divide-and-conquer strategy is based on recursively dividing a task into:@0.145882:0.281200:0.860478:0.281200:0.860478:0.264673:0.145882:0.264673:0.014357:0.011765:0.010441:0.005882:0.011765:0.006526:0.011765:0.006526:0.011765:0.010441:0.007831:0.010441:0.011765:0.011765:0.007831:0.010441:0.011765:0.011765:0.011765:0.011765:0.010441:0.007831:0.005882:0.009154:0.006526:0.007831:0.010441:0.006526:0.010441:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.011765:0.010441:0.009154:0.010441:0.011765:0.005882:0.011765:0.011765:0.005882:0.007831:0.010441:0.010441:0.011765:0.007831:0.009154:0.006526:0.011765:0.010441:0.006526:0.011765:0.005882:0.011765:0.006526:0.011765:0.006526:0.011765:0.006526:0.011765:0.011765:0.005882:0.010441:0.005882:0.006526:0.010441:0.009154:0.011765:0.005882:0.006526:0.011765:0.006526:0.011765
smaller subtasks until the size of a subtask is small enough to be handled:@0.117647:0.302109:0.802904:0.302109:0.802904:0.285582:0.117647:0.285582:0.009154:0.018291:0.010441:0.006526:0.006526:0.010441:0.007831:0.005882:0.009154:0.011765:0.011765:0.006526:0.010441:0.009154:0.011765:0.009154:0.005882:0.011765:0.011765:0.006526:0.006526:0.006526:0.005882:0.006526:0.011765:0.010441:0.005882:0.009154:0.006526:0.010441:0.010441:0.005882:0.011765:0.007831:0.005882:0.010441:0.005882:0.009154:0.011765:0.011765:0.006526:0.010441:0.009154:0.011765:0.005882:0.006526:0.009154:0.005882:0.009154:0.018291:0.010441:0.006526:0.006526:0.005882:0.010441:0.011765:0.011765:0.011765:0.011765:0.011765:0.005882:0.006526:0.011765:0.005882:0.011765:0.010441:0.005882:0.011765:0.010441:0.011765:0.011765:0.006526:0.010441:0.011765
sequentially. For example, a task that applies a transform to each element in an:@0.117647:0.323018:0.858713:0.323018:0.858713:0.306491:0.117647:0.306491:0.009154:0.010441:0.011765:0.011765:0.010441:0.011765:0.006526:0.006526:0.010441:0.006526:0.006526:0.010239:0.005882:0.005882:0.013070:0.011765:0.007831:0.005882:0.010441:0.011765:0.010441:0.018291:0.011765:0.006526:0.010441:0.005882:0.005882:0.010441:0.005882:0.006526:0.010441:0.009154:0.011765:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.010441:0.011765:0.011765:0.006526:0.006526:0.010441:0.009154:0.005882:0.010441:0.005882:0.006526:0.007831:0.010441:0.011765:0.009154:0.007831:0.011765:0.007831:0.018291:0.005882:0.006526:0.011765:0.005882:0.010441:0.010441:0.010441:0.011765:0.005882:0.010441:0.006526:0.010441:0.018291:0.010441:0.011765:0.006526:0.005882:0.006526:0.011765:0.005882:0.010441:0.011765
array of   integers can be broken down into two subtasks in which each:@0.117647:0.343927:0.795059:0.343927:0.795059:0.327400:0.117647:0.327400:0.010441:0.007831:0.007831:0.010441:0.011765:0.005882:0.011765:0.007831:0.005882:0.015684:0.005882:0.006526:0.011765:0.006526:0.010441:0.011765:0.010441:0.007831:0.009154:0.005882:0.010441:0.010441:0.011765:0.005882:0.011765:0.010441:0.005882:0.011765:0.007831:0.011765:0.011765:0.010441:0.011765:0.005882:0.011765:0.011765:0.016985:0.011765:0.005882:0.006526:0.011765:0.006526:0.011765:0.005882:0.006526:0.016985:0.011765:0.005882:0.009154:0.011765:0.011765:0.006526:0.010441:0.009154:0.011765:0.009154:0.005882:0.006526:0.011765:0.005882:0.016985:0.011765:0.006526:0.010441:0.011765:0.005882:0.010441:0.010441:0.010441:0.011765
N:@0.197318:0.343927:0.213012:0.343927:0.213012:0.327382:0.197318:0.327382:0.015694
transforms half the elements in the array. That is, one subtask transforms the:@0.117647:0.364836:0.835907:0.364836:0.835907:0.348309:0.117647:0.348309:0.006526:0.007831:0.010441:0.011765:0.009154:0.007831:0.011765:0.007831:0.018291:0.009154:0.005882:0.011765:0.010441:0.006526:0.007831:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.006526:0.010441:0.018291:0.010441:0.011765:0.006526:0.009154:0.005882:0.006526:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.007831:0.007831:0.010441:0.010239:0.005882:0.005882:0.014357:0.011765:0.010441:0.006526:0.005882:0.006526:0.009154:0.005882:0.005882:0.011765:0.011765:0.010441:0.005882:0.009154:0.011765:0.011765:0.006526:0.010441:0.009154:0.011765:0.005882:0.006526:0.007831:0.010441:0.011765:0.009154:0.007831:0.011765:0.007831:0.018291:0.009154:0.005882:0.006526:0.011765:0.010447
elements 0 to  /2, and the other transforms the elements  /2 to  . In turn, each:@0.117647:0.385745:0.863582:0.385745:0.863582:0.369218:0.117647:0.369218:0.010441:0.006526:0.010441:0.018291:0.010441:0.011765:0.006526:0.009154:0.005882:0.011765:0.005882:0.006526:0.011765:0.005882:0.015678:0.006526:0.011765:0.005882:0.005882:0.010441:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.006526:0.011765:0.010441:0.007831:0.005882:0.006526:0.007831:0.010441:0.011765:0.009154:0.007831:0.011765:0.007831:0.018291:0.009154:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.006526:0.010441:0.018291:0.010441:0.011765:0.006526:0.009154:0.005882:0.015682:0.006526:0.011765:0.005882:0.006526:0.011765:0.005882:0.015678:0.005882:0.005882:0.007831:0.011765:0.005882:0.006526:0.011765:0.007831:0.011765:0.005882:0.005882:0.010441:0.010441:0.010441:0.011765
N:@0.248929:0.385745:0.264624:0.385745:0.264624:0.369200:0.248929:0.369200:0.015694
N:@0.653894:0.385745:0.669588:0.385745:0.669588:0.369200:0.653894:0.369200:0.015694
N:@0.717918:0.385745:0.733612:0.385745:0.733612:0.369200:0.717918:0.369200:0.015694
subtask can be reduced to another set of subtasks, each transforming half of the:@0.117647:0.406655:0.863609:0.406655:0.863609:0.390127:0.117647:0.390127:0.009154:0.011765:0.011765:0.006526:0.010441:0.009154:0.011765:0.005882:0.010441:0.010441:0.011765:0.005882:0.011765:0.010441:0.005882:0.007831:0.010441:0.011765:0.011765:0.010441:0.010441:0.011765:0.005882:0.006526:0.011765:0.005882:0.010441:0.011765:0.011765:0.006526:0.011765:0.010441:0.007831:0.005882:0.009154:0.010441:0.006526:0.005882:0.011765:0.007831:0.005882:0.009154:0.011765:0.011765:0.006526:0.010441:0.009154:0.011765:0.009154:0.005882:0.005882:0.010441:0.010441:0.010441:0.011765:0.005882:0.006526:0.007831:0.010441:0.011765:0.009154:0.007831:0.011765:0.007831:0.018291:0.006526:0.011765:0.011765:0.005882:0.011765:0.010441:0.006526:0.007831:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.010447
remaining elements. This process of dividing the array will continue until a:@0.117647:0.427564:0.825668:0.427564:0.825668:0.411036:0.117647:0.411036:0.007831:0.010441:0.018291:0.010441:0.006526:0.011765:0.006526:0.011765:0.011765:0.005882:0.010441:0.006526:0.010441:0.018291:0.010441:0.011765:0.006526:0.009154:0.005882:0.005882:0.014357:0.011765:0.006526:0.009154:0.005882:0.011765:0.007831:0.011765:0.010441:0.010441:0.009154:0.009154:0.005882:0.011765:0.007831:0.005882:0.011765:0.006526:0.011765:0.006526:0.011765:0.006526:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.007831:0.007831:0.010441:0.011765:0.005882:0.016985:0.006526:0.006526:0.006526:0.005882:0.010441:0.011765:0.011765:0.006526:0.006526:0.011765:0.011765:0.010441:0.005882:0.011765:0.011765:0.006526:0.006526:0.006526:0.005882:0.010447
threshold is reached in which a sequential solution is faster than creating another:@0.117647:0.448473:0.876604:0.448473:0.876604:0.431945:0.117647:0.431945:0.006526:0.011765:0.007831:0.010441:0.009154:0.011765:0.011765:0.006526:0.011765:0.005882:0.006526:0.009154:0.005882:0.007831:0.010441:0.010441:0.010441:0.011765:0.010441:0.011765:0.005882:0.006526:0.011765:0.005882:0.016985:0.011765:0.006526:0.010441:0.011765:0.005882:0.010441:0.005882:0.009154:0.010441:0.011765:0.011765:0.010441:0.011765:0.006526:0.006526:0.010441:0.006526:0.005882:0.009154:0.011765:0.006526:0.011765:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.007831:0.010441:0.009154:0.006526:0.010441:0.007831:0.005882:0.006526:0.011765:0.010441:0.011765:0.005882:0.010441:0.007831:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.010441:0.011765:0.011765:0.006526:0.011765:0.010441:0.007835
division.:@0.117647:0.469382:0.199320:0.469382:0.199320:0.452855:0.117647:0.452855:0.011765:0.006526:0.011765:0.006526:0.009154:0.006526:0.011765:0.011765:0.005882
The advantage of the divide-and-conquer strategy is that the processing can:@0.145882:0.492109:0.856507:0.492109:0.856507:0.475582:0.145882:0.475582:0.014357:0.011765:0.010441:0.005882:0.010441:0.011765:0.011765:0.010441:0.011765:0.006526:0.010441:0.011765:0.010441:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.006526:0.011765:0.006526:0.011765:0.010441:0.007831:0.010441:0.011765:0.011765:0.007831:0.010441:0.011765:0.011765:0.011765:0.011765:0.010441:0.007831:0.005882:0.009154:0.006526:0.007831:0.010441:0.006526:0.010441:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.007831:0.011765:0.010441:0.010441:0.009154:0.009154:0.006526:0.011765:0.011765:0.005882:0.010441:0.010441:0.011765
occur in parallel. Therefore, instead of cycling through an entire array using a:@0.117647:0.513018:0.847818:0.513018:0.847818:0.496491:0.117647:0.496491:0.011765:0.010441:0.010441:0.011765:0.007831:0.005882:0.006526:0.011765:0.005882:0.011765:0.010441:0.007831:0.010441:0.006526:0.006526:0.010441:0.006526:0.005882:0.005882:0.014357:0.011765:0.010441:0.007831:0.010441:0.007831:0.011765:0.007831:0.010441:0.005882:0.005882:0.006526:0.011765:0.009154:0.006526:0.010441:0.010441:0.011765:0.005882:0.011765:0.007831:0.005882:0.010441:0.011765:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.011765:0.007831:0.011765:0.011765:0.011765:0.011765:0.005882:0.010441:0.011765:0.005882:0.010441:0.011765:0.006526:0.006526:0.007831:0.010441:0.005882:0.010441:0.007831:0.007831:0.010441:0.011765:0.005882:0.011765:0.009154:0.006526:0.011765:0.011765:0.005882:0.010447
single thread, pieces of the array can be processed simultaneously. Of course, the:@0.117647:0.533927:0.879675:0.533927:0.879675:0.517400:0.117647:0.517400:0.009154:0.006526:0.011765:0.011765:0.006526:0.010441:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.005882:0.005882:0.011765:0.006526:0.010441:0.010441:0.010441:0.009154:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.007831:0.007831:0.010441:0.011765:0.005882:0.010441:0.010441:0.011765:0.005882:0.011765:0.010441:0.005882:0.011765:0.007831:0.011765:0.010441:0.010441:0.009154:0.009154:0.010441:0.011765:0.005882:0.009154:0.006526:0.018291:0.011765:0.006526:0.006526:0.010441:0.011765:0.010441:0.011765:0.011765:0.009154:0.006526:0.010239:0.005882:0.005882:0.016985:0.007831:0.005882:0.010441:0.011765:0.011765:0.007831:0.009154:0.010441:0.005882:0.005882:0.006526:0.011765:0.010447
divide-and-conquer approach works in many cases in which an array (or:@0.117647:0.554836:0.798276:0.554836:0.798276:0.538309:0.117647:0.538309:0.011765:0.006526:0.011765:0.006526:0.011765:0.010441:0.007831:0.010441:0.011765:0.011765:0.007831:0.010441:0.011765:0.011765:0.011765:0.011765:0.010441:0.007831:0.005882:0.010441:0.011765:0.011765:0.007831:0.011765:0.010441:0.010441:0.011765:0.005882:0.016985:0.011765:0.007831:0.011765:0.009154:0.005882:0.006526:0.011765:0.005882:0.018291:0.010441:0.011765:0.011765:0.005882:0.010441:0.010441:0.009154:0.010441:0.009154:0.005882:0.006526:0.011765:0.005882:0.016985:0.011765:0.006526:0.010441:0.011765:0.005882:0.010441:0.011765:0.005882:0.010441:0.007831:0.007831:0.010441:0.011765:0.005882:0.007831:0.011765:0.007835
collection) is not present, but the most common uses involve some type of array,:@0.117647:0.575745:0.874522:0.575745:0.874522:0.559218:0.117647:0.559218:0.010441:0.011765:0.006526:0.006526:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.007831:0.005882:0.006526:0.009154:0.005882:0.011765:0.011765:0.006526:0.005882:0.011765:0.007831:0.010441:0.009154:0.010441:0.011765:0.006526:0.005882:0.005882:0.011765:0.011765:0.006526:0.005882:0.006526:0.011765:0.010441:0.005882:0.018291:0.011765:0.009154:0.006526:0.005882:0.010441:0.011765:0.018291:0.018291:0.011765:0.011765:0.005882:0.011765:0.009154:0.010441:0.009154:0.005882:0.006526:0.011765:0.011765:0.011765:0.006526:0.011765:0.010441:0.005882:0.009154:0.011765:0.018291:0.010441:0.005882:0.006526:0.011765:0.011765:0.010441:0.005882:0.011765:0.007831:0.005882:0.010441:0.007831:0.007831:0.010441:0.010239:0.005882
collection, or grouping of data.:@0.117647:0.596655:0.408971:0.596655:0.408971:0.580127:0.117647:0.580127:0.010441:0.011765:0.006526:0.006526:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.005882:0.011765:0.007831:0.005882:0.011765:0.007831:0.011765:0.011765:0.011765:0.006526:0.011765:0.011765:0.005882:0.011765:0.007831:0.005882:0.011765:0.010441:0.006526:0.010441:0.005882
One of the keys to best employing the divide-and-conquer strategy is:@0.145882:0.619382:0.795182:0.619382:0.795182:0.602855:0.145882:0.602855:0.016985:0.011765:0.010441:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.010441:0.011765:0.009154:0.005882:0.006526:0.011765:0.005882:0.011765:0.010441:0.009154:0.006526:0.005882:0.010441:0.018291:0.011765:0.006526:0.011765:0.011765:0.006526:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.006526:0.011765:0.006526:0.011765:0.010441:0.007831:0.010441:0.011765:0.011765:0.007831:0.010441:0.011765:0.011765:0.011765:0.011765:0.010441:0.007831:0.005882:0.009154:0.006526:0.007831:0.010441:0.006526:0.010441:0.011765:0.011765:0.005882:0.006526:0.009153
correctly selecting the threshold at which sequential processing (rather than:@0.117647:0.640291:0.827574:0.640291:0.827574:0.623764:0.117647:0.623764:0.010441:0.011765:0.007831:0.007831:0.010441:0.010441:0.006526:0.006526:0.011765:0.005882:0.009154:0.010441:0.006526:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.006526:0.011765:0.007831:0.010441:0.009154:0.011765:0.011765:0.006526:0.011765:0.005882:0.010441:0.006526:0.005882:0.016985:0.011765:0.006526:0.010441:0.011765:0.005882:0.009154:0.010441:0.011765:0.011765:0.010441:0.011765:0.006526:0.006526:0.010441:0.006526:0.005882:0.011765:0.007831:0.011765:0.010441:0.010441:0.009154:0.009154:0.006526:0.011765:0.011765:0.005882:0.007831:0.007831:0.010441:0.006526:0.011765:0.010441:0.007831:0.005882:0.006526:0.011765:0.010441:0.011765
further division) is used. Typically, an optimal threshold is obtained through:@0.117647:0.661200:0.833033:0.661200:0.833033:0.644673:0.117647:0.644673:0.007831:0.011765:0.007831:0.006526:0.011765:0.010441:0.007831:0.005882:0.011765:0.006526:0.011765:0.006526:0.009154:0.006526:0.011765:0.011765:0.007831:0.005882:0.006526:0.009154:0.005882:0.011765:0.009154:0.010441:0.011765:0.005882:0.005882:0.012721:0.011765:0.011765:0.006526:0.010441:0.010441:0.006526:0.006526:0.010239:0.005882:0.005882:0.010441:0.011765:0.005882:0.011765:0.011765:0.006526:0.006526:0.018291:0.010441:0.006526:0.005882:0.006526:0.011765:0.007831:0.010441:0.009154:0.011765:0.011765:0.006526:0.011765:0.005882:0.006526:0.009154:0.005882:0.011765:0.011765:0.006526:0.010441:0.006526:0.011765:0.010441:0.011765:0.005882:0.006526:0.011765:0.007831:0.011765:0.011765:0.011765:0.011765
profiling the execution characteristics. However, very significant speed-ups will:@0.117647:0.682109:0.870420:0.682109:0.870420:0.665582:0.117647:0.665582:0.011765:0.007831:0.011765:0.007831:0.006526:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.011765:0.010441:0.010441:0.011765:0.006526:0.006526:0.011765:0.011765:0.005882:0.010441:0.011765:0.010441:0.007831:0.010441:0.010441:0.006526:0.010441:0.007831:0.006526:0.009154:0.006526:0.006526:0.010441:0.009154:0.005882:0.005882:0.016985:0.011765:0.016985:0.010441:0.011765:0.010441:0.006893:0.005882:0.005882:0.011765:0.010441:0.007831:0.011765:0.005882:0.009154:0.006526:0.011765:0.011765:0.006526:0.007831:0.006526:0.010441:0.010441:0.011765:0.006526:0.005882:0.009154:0.011765:0.010441:0.010441:0.011765:0.007831:0.011765:0.011765:0.009154:0.005882:0.016985:0.006526:0.006526:0.006541
still occur even when a less-than-optimal threshold is used. It is, however, best to:@0.117647:0.703018:0.880956:0.703018:0.880956:0.686491:0.117647:0.686491:0.009154:0.006526:0.006526:0.006526:0.006526:0.005882:0.011765:0.010441:0.010441:0.011765:0.007831:0.005882:0.010441:0.011765:0.010441:0.011765:0.005882:0.016985:0.011765:0.010441:0.011765:0.005882:0.010441:0.005882:0.006526:0.010441:0.009154:0.009154:0.007831:0.006526:0.011765:0.010441:0.011765:0.007831:0.011765:0.011765:0.006526:0.006526:0.018291:0.010441:0.006526:0.005882:0.006526:0.011765:0.007831:0.010441:0.009154:0.011765:0.011765:0.006526:0.011765:0.005882:0.006526:0.009154:0.005882:0.011765:0.009154:0.010441:0.011765:0.005882:0.005882:0.007831:0.006526:0.005882:0.006526:0.009154:0.005882:0.005882:0.011765:0.011765:0.016985:0.010441:0.011765:0.010441:0.006893:0.005882:0.005882:0.011765:0.010441:0.009154:0.006526:0.005882:0.006526:0.011765
avoid overly large or overly small thresholds. At the time of this writing, the:@0.117647:0.723927:0.836385:0.723927:0.836385:0.707400:0.117647:0.707400:0.010441:0.011765:0.011765:0.006526:0.011765:0.005882:0.011765:0.011765:0.010441:0.007831:0.006526:0.011765:0.005882:0.006526:0.010441:0.007408:0.011765:0.010441:0.005882:0.011765:0.007831:0.005882:0.011765:0.011765:0.010441:0.007831:0.006526:0.011765:0.005882:0.009154:0.018291:0.010441:0.006526:0.006526:0.005882:0.006526:0.011765:0.007831:0.010441:0.009154:0.011765:0.011765:0.006526:0.011765:0.009154:0.005882:0.005882:0.016985:0.006526:0.005882:0.006526:0.011765:0.010441:0.005882:0.006526:0.006526:0.018291:0.010441:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.006526:0.009154:0.005882:0.016985:0.007831:0.006526:0.006526:0.006526:0.011765:0.011765:0.005882:0.005882:0.006526:0.011765:0.010447
Java API documentation for :@0.117647:0.744836:0.388070:0.744836:0.388070:0.728309:0.117647:0.728309:0.009154:0.010441:0.011765:0.010441:0.005882:0.016985:0.013070:0.007831:0.005882:0.011765:0.011765:0.010441:0.011765:0.018291:0.010441:0.011765:0.006526:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.007831:0.011765:0.007831:0.005882
ForkJoinTask<T>:@0.388071:0.744836:0.570839:0.744836:0.570839:0.728600:0.388071:0.728600:0.014357:0.011765:0.010441:0.013070:0.011765:0.011765:0.006526:0.013070:0.013529:0.011765:0.009154:0.013070:0.013401:0.015680:0.013412
 states that, as a rule-of-thumb, a:@0.570824:0.744836:0.877796:0.744836:0.877796:0.728309:0.570824:0.728309:0.005882:0.009154:0.006526:0.010441:0.006526:0.010441:0.009154:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.005882:0.010441:0.009154:0.005882:0.010441:0.005882:0.007831:0.011765:0.006526:0.010441:0.007831:0.011765:0.007831:0.007831:0.006526:0.011765:0.011765:0.018291:0.011765:0.005882:0.005882:0.010447
task should perform somewhere between 100 and 10,000 computational steps.:@0.117647:0.765745:0.853879:0.765745:0.853879:0.749218:0.117647:0.749218:0.006526:0.010441:0.009154:0.011765:0.005882:0.009154:0.011765:0.011765:0.011765:0.006526:0.011765:0.005882:0.011765:0.010441:0.007831:0.007831:0.011765:0.007831:0.018291:0.005882:0.009154:0.011765:0.018291:0.010441:0.016985:0.011765:0.010441:0.007831:0.010441:0.005882:0.011765:0.010441:0.006526:0.016985:0.010441:0.010441:0.011765:0.005882:0.011765:0.011765:0.011765:0.005882:0.010441:0.011765:0.011765:0.005882:0.011765:0.011765:0.005882:0.011765:0.011765:0.011765:0.005882:0.010441:0.011765:0.018291:0.011765:0.011765:0.006526:0.010441:0.006526:0.006526:0.011765:0.011765:0.010441:0.006526:0.005882:0.009154:0.006526:0.010441:0.011765:0.009154:0.005882
It is also important to understand that the optimal threshold value is also:@0.145882:0.788473:0.825202:0.788473:0.825202:0.771945:0.145882:0.771945:0.007831:0.006526:0.005882:0.006526:0.009154:0.005882:0.010441:0.006526:0.009154:0.011765:0.005882:0.006526:0.018291:0.011765:0.011765:0.007831:0.006526:0.010441:0.011765:0.006526:0.005882:0.006526:0.011765:0.005882:0.011765:0.011765:0.011765:0.010441:0.007831:0.009154:0.006526:0.010441:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.011765:0.006526:0.006526:0.018291:0.010441:0.006526:0.005882:0.006526:0.011765:0.007831:0.010441:0.009154:0.011765:0.011765:0.006526:0.011765:0.005882:0.011765:0.010441:0.006526:0.011765:0.010441:0.005882:0.006526:0.009154:0.005882:0.010441:0.006526:0.009154:0.011765
affected by how much time the computation takes. If each computational step is:@0.117647:0.809382:0.868988:0.809382:0.868988:0.792855:0.117647:0.792855:0.010441:0.007408:0.007831:0.010441:0.010441:0.006526:0.010441:0.011765:0.005882:0.011765:0.011765:0.005882:0.011765:0.011765:0.016985:0.005882:0.018291:0.011765:0.010441:0.011765:0.005882:0.006526:0.006526:0.018291:0.010441:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.011765:0.018291:0.011765:0.011765:0.006526:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.010441:0.011765:0.010441:0.009154:0.005882:0.005882:0.007831:0.007831:0.005882:0.010441:0.010441:0.010441:0.011765:0.005882:0.010441:0.011765:0.018291:0.011765:0.011765:0.006526:0.010441:0.006526:0.006526:0.011765:0.011765:0.010441:0.006526:0.005882:0.009154:0.006526:0.010441:0.011765:0.005882:0.006526:0.009153
fairly long, then smaller thresholds might be better. Conversely, if each:@0.117647:0.830291:0.785607:0.830291:0.785607:0.813764:0.117647:0.813764:0.007831:0.010441:0.006526:0.007831:0.006526:0.011765:0.005882:0.006526:0.011765:0.011765:0.011765:0.005882:0.005882:0.006526:0.011765:0.010441:0.011765:0.005882:0.009154:0.018291:0.010441:0.006526:0.006526:0.010441:0.007831:0.005882:0.006526:0.011765:0.007831:0.010441:0.009154:0.011765:0.011765:0.006526:0.011765:0.009154:0.005882:0.018291:0.006526:0.011765:0.011765:0.006526:0.005882:0.011765:0.010441:0.005882:0.011765:0.010441:0.006526:0.006526:0.010441:0.006526:0.005882:0.005882:0.015680:0.011765:0.011765:0.011765:0.010441:0.007831:0.009154:0.010441:0.006526:0.010239:0.005882:0.005882:0.006526:0.007831:0.005882:0.010441:0.010441:0.010441:0.011765
computational step is quite short, then larger thresholds could yield better results.:@0.117647:0.851200:0.882096:0.851200:0.882096:0.834673:0.117647:0.834673:0.010441:0.011765:0.018291:0.011765:0.011765:0.006526:0.010441:0.006526:0.006526:0.011765:0.011765:0.010441:0.006526:0.005882:0.009154:0.006526:0.010441:0.011765:0.005882:0.006526:0.009154:0.005882:0.011765:0.011765:0.006526:0.006526:0.010441:0.005882:0.009154:0.011765:0.011765:0.007831:0.006526:0.005882:0.005882:0.006526:0.011765:0.010441:0.011765:0.005882:0.006526:0.010441:0.007408:0.011765:0.010441:0.007831:0.005882:0.006526:0.011765:0.007831:0.010441:0.009154:0.011765:0.011765:0.006526:0.011765:0.009154:0.005882:0.010441:0.011765:0.011765:0.006526:0.011765:0.005882:0.011765:0.006526:0.010441:0.006526:0.011765:0.005882:0.011765:0.010441:0.006526:0.006526:0.010441:0.007831:0.005882:0.007831:0.010441:0.009154:0.011765:0.006526:0.006526:0.009154:0.005882
For applications that are to be run on a known system, with a known number of:@0.117647:0.872109:0.864986:0.872109:0.864986:0.855582:0.117647:0.855582:0.013070:0.011765:0.007831:0.005882:0.010441:0.011765:0.011765:0.006526:0.006526:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.009154:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.010441:0.007831:0.010441:0.005882:0.006526:0.011765:0.005882:0.011765:0.010441:0.005882:0.007831:0.011765:0.011765:0.005882:0.011765:0.011765:0.005882:0.010441:0.005882:0.011765:0.011765:0.011765:0.016985:0.011765:0.005882:0.009154:0.011765:0.009154:0.006526:0.010441:0.018291:0.005882:0.005882:0.016985:0.006526:0.006526:0.011765:0.005882:0.010441:0.005882:0.011765:0.011765:0.011765:0.016985:0.011765:0.005882:0.011765:0.011765:0.018291:0.011765:0.010441:0.007831:0.005882:0.011765:0.007835
processors, you can use the number of processors to make informed decisions:@0.117647:0.893018:0.849300:0.893018:0.849300:0.876491:0.117647:0.876491:0.011765:0.007831:0.011765:0.010441:0.010441:0.009154:0.009154:0.011765:0.007831:0.009154:0.005882:0.005882:0.011765:0.011765:0.011765:0.005882:0.010441:0.010441:0.011765:0.005882:0.011765:0.009154:0.010441:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.011765:0.018291:0.011765:0.010441:0.007831:0.005882:0.011765:0.007831:0.005882:0.011765:0.007831:0.011765:0.010441:0.010441:0.009154:0.009154:0.011765:0.007831:0.009154:0.005882:0.006526:0.011765:0.005882:0.018291:0.010441:0.011765:0.010441:0.005882:0.006526:0.011765:0.007831:0.011765:0.007831:0.018291:0.010441:0.011765:0.005882:0.011765:0.010441:0.010441:0.006526:0.009154:0.006526:0.011765:0.011765:0.009153