you can sometimes create and start a thread with one line of code, without the:@0.117647:0.110902:0.849822:0.110902:0.849822:0.094374:0.117647:0.094374:0.011765:0.011765:0.011765:0.005882:0.010441:0.010441:0.011765:0.005882:0.009154:0.011765:0.018291:0.010441:0.006526:0.006526:0.018291:0.010441:0.009154:0.005882:0.010441:0.007831:0.010441:0.010441:0.006526:0.010441:0.005882:0.010441:0.011765:0.011765:0.005882:0.009154:0.006526:0.010441:0.007831:0.006526:0.005882:0.010441:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.005882:0.016985:0.006526:0.006526:0.011765:0.005882:0.011765:0.011765:0.010441:0.005882:0.006526:0.006526:0.011765:0.010441:0.005882:0.011765:0.007831:0.005882:0.010441:0.011765:0.011765:0.010441:0.005882:0.005882:0.016985:0.006526:0.006526:0.011765:0.011765:0.011765:0.006526:0.005882:0.006526:0.011765:0.010447
use of a factory method. For example, again assuming the :@0.117647:0.132109:0.667647:0.132109:0.667647:0.115582:0.117647:0.115582:0.011765:0.009154:0.010441:0.005882:0.011765:0.007831:0.005882:0.010441:0.005882:0.007831:0.010441:0.010441:0.006526:0.011765:0.007831:0.011765:0.005882:0.018291:0.010441:0.006526:0.011765:0.011765:0.011765:0.005882:0.005882:0.013070:0.011765:0.007831:0.005882:0.010441:0.011765:0.010441:0.018291:0.011765:0.006526:0.010441:0.005882:0.005882:0.010441:0.011765:0.010441:0.006526:0.011765:0.005882:0.010441:0.009154:0.009154:0.011765:0.018291:0.006526:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882
ThreadDemo:@0.667647:0.132109:0.800478:0.132109:0.800478:0.115873:0.667647:0.115873:0.015680:0.013070:0.010018:0.010441:0.011765:0.013070:0.016985:0.010441:0.019596:0.011765
program, the following creates and starts a :@0.117647:0.153018:0.523897:0.153018:0.523897:0.136491:0.117647:0.136491:0.011765:0.007831:0.011765:0.011765:0.007831:0.010441:0.018291:0.005882:0.005882:0.006526:0.011765:0.010441:0.005882:0.007831:0.011765:0.006526:0.006526:0.011765:0.016985:0.006526:0.011765:0.011765:0.005882:0.010441:0.007831:0.010441:0.010441:0.006526:0.010441:0.009154:0.005882:0.010441:0.011765:0.011765:0.005882:0.009154:0.006526:0.010441:0.007831:0.006526:0.009154:0.005882:0.010441:0.005882
NewThread:@0.523894:0.153018:0.642363:0.153018:0.642363:0.136782:0.523894:0.136782:0.016985:0.010441:0.016985:0.015680:0.013070:0.010018:0.010441:0.011765:0.013082
 thread::@0.642353:0.153018:0.713545:0.153018:0.713545:0.136491:0.642353:0.136491:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.006541
new NewThread().t.start();:@0.117647:0.186371:0.411110:0.186371:0.411110:0.174720:0.117647:0.174720:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011287:0.011294
However, in real-world applications, you will usually need to keep a reference to:@0.117647:0.226655:0.878254:0.226655:0.878254:0.210127:0.117647:0.210127:0.016985:0.011765:0.016985:0.010441:0.011765:0.010441:0.006893:0.005882:0.005882:0.006526:0.011765:0.005882:0.007831:0.010441:0.010441:0.006526:0.007831:0.016985:0.011765:0.007831:0.006526:0.011765:0.005882:0.010441:0.011765:0.011765:0.006526:0.006526:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.009154:0.005882:0.005882:0.011765:0.011765:0.011765:0.005882:0.016985:0.006526:0.006526:0.006526:0.005882:0.011765:0.009154:0.011765:0.010441:0.006526:0.006526:0.011765:0.005882:0.011765:0.010441:0.010441:0.011765:0.005882:0.006526:0.011765:0.005882:0.011765:0.010441:0.010441:0.011765:0.005882:0.010441:0.005882:0.007831:0.010441:0.007831:0.010441:0.007831:0.010441:0.011765:0.010441:0.010441:0.005882:0.006526:0.011765
the thread, so the factory method is often a good choice.:@0.117647:0.247564:0.645423:0.247564:0.645423:0.231036:0.117647:0.231036:0.006526:0.011765:0.010441:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.005882:0.005882:0.009154:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.007831:0.010441:0.010441:0.006526:0.011765:0.007831:0.011765:0.005882:0.018291:0.010441:0.006526:0.011765:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.011765:0.007831:0.006526:0.010441:0.011765:0.005882:0.010441:0.005882:0.011765:0.011765:0.011765:0.011765:0.005882:0.010441:0.011765:0.011765:0.006526:0.010441:0.010441:0.005882
Using Multithreading:@0.117647:0.311935:0.475937:0.311935:0.475937:0.285145:0.117647:0.285145:0.028033:0.015092:0.010772:0.021581:0.019412:0.009706:0.036636:0.021581:0.010772:0.012923:0.010772:0.012923:0.021581:0.016526:0.017224:0.019412:0.021581:0.010772:0.021581:0.019412
The key to utilizing Java’s multithreading features effectively is to think:@0.117647:0.343018:0.796452:0.343018:0.796452:0.326491:0.117647:0.326491:0.014357:0.011765:0.010441:0.005882:0.011765:0.010441:0.011765:0.005882:0.006526:0.011765:0.005882:0.011765:0.006526:0.006526:0.006526:0.006526:0.010441:0.006526:0.011765:0.011765:0.005882:0.009154:0.010441:0.011765:0.010441:0.006526:0.009154:0.005882:0.018291:0.011765:0.006526:0.006526:0.006526:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.006526:0.011765:0.011765:0.005882:0.007831:0.010441:0.010441:0.006526:0.011765:0.007831:0.010441:0.009154:0.005882:0.010441:0.007408:0.007831:0.010441:0.010441:0.006526:0.006526:0.011765:0.010441:0.006526:0.011765:0.005882:0.006526:0.009154:0.005882:0.006526:0.011765:0.005882:0.006526:0.011765:0.006526:0.011765:0.011765
concurrently rather than serially. For example, when you have two subsystems:@0.117647:0.363927:0.855550:0.363927:0.855550:0.347400:0.117647:0.347400:0.010441:0.011765:0.011765:0.010441:0.011765:0.007831:0.007831:0.010441:0.011765:0.006526:0.006526:0.011765:0.005882:0.007831:0.010441:0.006526:0.011765:0.010441:0.007831:0.005882:0.006526:0.011765:0.010441:0.011765:0.005882:0.009154:0.010441:0.007831:0.006526:0.010441:0.006526:0.006526:0.010239:0.005882:0.005882:0.013070:0.011765:0.007831:0.005882:0.010441:0.011765:0.010441:0.018291:0.011765:0.006526:0.010441:0.005882:0.005882:0.016985:0.011765:0.010441:0.011765:0.005882:0.011765:0.011765:0.011765:0.005882:0.011765:0.010441:0.011765:0.010441:0.005882:0.006526:0.016985:0.011765:0.005882:0.009154:0.011765:0.011765:0.009154:0.011765:0.009154:0.006526:0.010441:0.018291:0.009153
within a program that can execute concurrently, make them individual threads.:@0.117647:0.384836:0.856765:0.384836:0.856765:0.368309:0.117647:0.368309:0.016985:0.006526:0.006526:0.011765:0.006526:0.011765:0.005882:0.010441:0.005882:0.011765:0.007831:0.011765:0.011765:0.007831:0.010441:0.018291:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.010441:0.010441:0.011765:0.005882:0.010441:0.011765:0.010441:0.010441:0.011765:0.006526:0.010441:0.005882:0.010441:0.011765:0.011765:0.010441:0.011765:0.007831:0.007831:0.010441:0.011765:0.006526:0.006526:0.010239:0.005882:0.005882:0.018291:0.010441:0.011765:0.010441:0.005882:0.006526:0.011765:0.010441:0.018291:0.005882:0.006526:0.011765:0.011765:0.006526:0.011765:0.006526:0.011765:0.011765:0.010441:0.006526:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.009154:0.005882
With the careful use of multithreading, you can create very efficient programs. A:@0.117647:0.405745:0.879102:0.405745:0.879102:0.389218:0.117647:0.389218:0.021268:0.006526:0.006526:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.010441:0.007831:0.010441:0.007831:0.011765:0.006526:0.005882:0.011765:0.009154:0.010441:0.005882:0.011765:0.007831:0.005882:0.018291:0.011765:0.006526:0.006526:0.006526:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.006526:0.011765:0.011765:0.005882:0.005882:0.011765:0.011765:0.011765:0.005882:0.010441:0.010441:0.011765:0.005882:0.010441:0.007831:0.010441:0.010441:0.006526:0.010441:0.005882:0.011765:0.010441:0.007831:0.011765:0.005882:0.010441:0.007408:0.007831:0.006526:0.010441:0.006526:0.010441:0.011765:0.006526:0.005882:0.011765:0.007831:0.011765:0.011765:0.007831:0.010441:0.018291:0.009154:0.005882:0.005882:0.016988
word of caution is in order, however: If you create too many threads, you can:@0.117647:0.426655:0.844375:0.426655:0.844375:0.410127:0.117647:0.410127:0.016985:0.011765:0.007831:0.011765:0.005882:0.011765:0.007831:0.005882:0.010441:0.010441:0.011765:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.006526:0.011765:0.005882:0.011765:0.007831:0.011765:0.010441:0.006893:0.005882:0.005882:0.011765:0.011765:0.016985:0.010441:0.011765:0.010441:0.007831:0.006526:0.005882:0.007831:0.007831:0.005882:0.011765:0.011765:0.011765:0.005882:0.010441:0.007831:0.010441:0.010441:0.006526:0.010441:0.005882:0.006526:0.011765:0.011765:0.005882:0.018291:0.010441:0.011765:0.011765:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.009154:0.005882:0.005882:0.011765:0.011765:0.011765:0.005882:0.010441:0.010441:0.011765
actually degrade the performance of your program rather than enhance it.:@0.117647:0.447564:0.806654:0.447564:0.806654:0.431036:0.117647:0.431036:0.010441:0.010441:0.006526:0.011765:0.010441:0.006526:0.006526:0.011765:0.005882:0.011765:0.010441:0.011765:0.007831:0.010441:0.011765:0.010441:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.010441:0.007831:0.007831:0.011765:0.007831:0.018291:0.010441:0.011765:0.010441:0.010441:0.005882:0.011765:0.007831:0.005882:0.011765:0.011765:0.011765:0.007831:0.005882:0.011765:0.007831:0.011765:0.011765:0.007831:0.010441:0.018291:0.005882:0.007831:0.010441:0.006526:0.011765:0.010441:0.007831:0.005882:0.006526:0.011765:0.010441:0.011765:0.005882:0.010441:0.011765:0.011765:0.010441:0.011765:0.010441:0.010441:0.005882:0.006526:0.006526:0.005882
Remember, some overhead is associated with context switching. If you create:@0.117647:0.468473:0.848241:0.468473:0.848241:0.451945:0.117647:0.451945:0.015680:0.010441:0.018291:0.010441:0.018291:0.011765:0.010441:0.006893:0.005882:0.005882:0.009154:0.011765:0.018291:0.010441:0.005882:0.011765:0.011765:0.010441:0.007831:0.011765:0.010441:0.010441:0.011765:0.005882:0.006526:0.009154:0.005882:0.010441:0.009154:0.009154:0.011765:0.010441:0.006526:0.010441:0.006526:0.010441:0.011765:0.005882:0.016985:0.006526:0.006526:0.011765:0.005882:0.010441:0.011765:0.011765:0.006526:0.010441:0.011765:0.006526:0.005882:0.009154:0.016985:0.006526:0.006526:0.010441:0.011765:0.006526:0.011765:0.011765:0.005882:0.005882:0.007831:0.007831:0.005882:0.011765:0.011765:0.011765:0.005882:0.010441:0.007831:0.010441:0.010441:0.006526:0.010447
too many threads, more CPU time will be spent changing contexts than:@0.117647:0.489382:0.787849:0.489382:0.787849:0.472855:0.117647:0.472855:0.006526:0.011765:0.011765:0.005882:0.018291:0.010441:0.011765:0.011765:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.009154:0.005882:0.005882:0.018291:0.011765:0.007831:0.010441:0.005882:0.015680:0.013070:0.016985:0.005882:0.006526:0.006526:0.018291:0.010441:0.005882:0.016985:0.006526:0.006526:0.006526:0.005882:0.011765:0.010441:0.005882:0.009154:0.011765:0.010441:0.011765:0.006526:0.005882:0.010441:0.011765:0.010441:0.011765:0.011765:0.006526:0.011765:0.011765:0.005882:0.010441:0.011765:0.011765:0.006526:0.010441:0.011765:0.006526:0.009154:0.005882:0.006526:0.011765:0.010441:0.011765
executing your program! One last point: To create compute-intensive:@0.117647:0.510291:0.767837:0.510291:0.767837:0.493764:0.117647:0.493764:0.010441:0.011765:0.010441:0.010441:0.011765:0.006526:0.006526:0.011765:0.011765:0.005882:0.011765:0.011765:0.011765:0.007831:0.005882:0.011765:0.007831:0.011765:0.011765:0.007831:0.010441:0.018291:0.007831:0.005882:0.016985:0.011765:0.010441:0.005882:0.006526:0.010441:0.009154:0.006526:0.005882:0.011765:0.011765:0.006526:0.011765:0.006526:0.006526:0.005882:0.012721:0.011765:0.005882:0.010441:0.007831:0.010441:0.010441:0.006526:0.010441:0.005882:0.010441:0.011765:0.018291:0.011765:0.011765:0.006526:0.010441:0.007831:0.006526:0.011765:0.006526:0.010441:0.011765:0.009154:0.006526:0.011765:0.010447
applications that can automatically scale to make use of the available processors:@0.117647:0.531200:0.871966:0.531200:0.871966:0.514673:0.117647:0.514673:0.010441:0.011765:0.011765:0.006526:0.006526:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.009154:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.010441:0.010441:0.011765:0.005882:0.010441:0.011765:0.006526:0.011765:0.018291:0.010441:0.006526:0.006526:0.010441:0.010441:0.006526:0.006526:0.011765:0.005882:0.009154:0.010441:0.010441:0.006526:0.010441:0.005882:0.006526:0.011765:0.005882:0.018291:0.010441:0.011765:0.010441:0.005882:0.011765:0.009154:0.010441:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.011765:0.010441:0.006526:0.006526:0.010441:0.011765:0.006526:0.010441:0.005882:0.011765:0.007831:0.011765:0.010441:0.010441:0.009154:0.009154:0.011765:0.007831:0.009153
in a multicore system, consider using the Fork/Join Framework, which is:@0.117647:0.552109:0.803546:0.552109:0.803546:0.535582:0.117647:0.535582:0.006526:0.011765:0.005882:0.010441:0.005882:0.018291:0.011765:0.006526:0.006526:0.006526:0.010441:0.011765:0.007831:0.010441:0.005882:0.009154:0.011765:0.009154:0.006526:0.010441:0.018291:0.005882:0.005882:0.010441:0.011765:0.011765:0.009154:0.006526:0.011765:0.010441:0.007831:0.005882:0.011765:0.009154:0.006526:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.005882:0.013070:0.011765:0.007831:0.011765:0.006526:0.009154:0.011765:0.006526:0.011765:0.005882:0.013070:0.007831:0.010441:0.018291:0.010441:0.016985:0.011765:0.007831:0.011765:0.005882:0.005882:0.016985:0.011765:0.006526:0.010441:0.011765:0.005882:0.006526:0.009153
described in :@0.117647:0.573018:0.237831:0.573018:0.237831:0.556491:0.117647:0.556491:0.011765:0.010441:0.009154:0.010441:0.007831:0.006526:0.011765:0.010441:0.011765:0.005882:0.006526:0.011765:0.005882
Chapter 28:@0.237835:0.573018:0.341696:0.573018:0.341696:0.556491:0.237835:0.556491:0.015680:0.011765:0.010441:0.011765:0.006526:0.010441:0.007831:0.005882:0.011765:0.011765
.:@0.341694:0.573018:0.347576:0.573018:0.347576:0.556491:0.341694:0.556491:0.005882