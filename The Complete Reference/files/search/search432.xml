Here, the :@0.117647:0.437564:0.209724:0.437564:0.209724:0.421036:0.117647:0.421036:0.016985:0.010441:0.007831:0.010441:0.005882:0.005882:0.006526:0.011765:0.010441:0.005882
call( ):@0.209729:0.437564:0.266535:0.437564:0.266535:0.421327:0.209729:0.421327:0.010441:0.011765:0.006526:0.006526:0.007831:0.005882:0.007835
 method is not modified by :@0.266529:0.437564:0.526548:0.437564:0.526548:0.421036:0.266529:0.421036:0.005882:0.018291:0.010441:0.006526:0.011765:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.011765:0.011765:0.006526:0.005882:0.018291:0.011765:0.011765:0.006526:0.007831:0.006526:0.010441:0.011765:0.005882:0.011765:0.011765:0.005882
synchronized:@0.526541:0.437564:0.659385:0.437564:0.659385:0.421327:0.526541:0.421327:0.009154:0.011765:0.013070:0.010441:0.013070:0.010018:0.011765:0.013070:0.006526:0.010441:0.010441:0.013082
. Instead, the:@0.659376:0.437564:0.779566:0.437564:0.779566:0.421036:0.659376:0.421036:0.005882:0.005882:0.007831:0.011765:0.009154:0.006526:0.010441:0.010441:0.011765:0.005882:0.005882:0.006526:0.011765:0.010447
synchronized:@0.117647:0.458473:0.250491:0.458473:0.250491:0.442236:0.117647:0.442236:0.009154:0.011765:0.013070:0.010441:0.013070:0.010018:0.011765:0.013070:0.006526:0.010441:0.010441:0.013082
 statement is used inside :@0.250482:0.458473:0.484986:0.458473:0.484986:0.441945:0.250482:0.441945:0.005882:0.009154:0.006526:0.010441:0.006526:0.010441:0.018291:0.010441:0.011765:0.006526:0.005882:0.006526:0.009154:0.005882:0.011765:0.009154:0.010441:0.011765:0.005882:0.006526:0.011765:0.009154:0.006526:0.011765:0.010441:0.005882
Caller run( ):@0.484976:0.458473:0.627353:0.458473:0.627353:0.442236:0.484976:0.442236:0.016985:0.011765:0.006526:0.006526:0.010441:0.010447:0.021557:0.010441:0.013070:0.013070:0.007831:0.005882:0.007835
’s :@0.547671:0.458473:0.569233:0.458473:0.569233:0.441945:0.547671:0.441945:0.006526:0.009154:0.005882
 method. This causes the:@0.627353:0.458473:0.859252:0.458473:0.859252:0.441945:0.627353:0.441945:0.005882:0.018291:0.010441:0.006526:0.011765:0.011765:0.011765:0.005882:0.005882:0.014357:0.011765:0.006526:0.009154:0.005882:0.010441:0.010441:0.011765:0.009154:0.010441:0.009154:0.005882:0.006526:0.011765:0.010447
same correct output as the preceding example, because each thread waits for the:@0.117647:0.479382:0.870668:0.479382:0.870668:0.462855:0.117647:0.462855:0.009154:0.010441:0.018291:0.010441:0.005882:0.010441:0.011765:0.007831:0.007831:0.010441:0.010441:0.006526:0.005882:0.011765:0.011765:0.006526:0.011765:0.011765:0.006526:0.005882:0.010441:0.009154:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.007831:0.010441:0.010441:0.010441:0.011765:0.006526:0.011765:0.011765:0.005882:0.010441:0.011765:0.010441:0.018291:0.011765:0.006526:0.010441:0.005882:0.005882:0.011765:0.010441:0.010441:0.010441:0.011765:0.009154:0.010441:0.005882:0.010441:0.010441:0.010441:0.011765:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.005882:0.016985:0.010441:0.006526:0.006526:0.009154:0.005882:0.007831:0.011765:0.007831:0.005882:0.006526:0.011765:0.010447
prior one to finish before proceeding.:@0.117647:0.500291:0.469062:0.500291:0.469062:0.483764:0.117647:0.483764:0.011765:0.007831:0.006526:0.011765:0.007831:0.005882:0.011765:0.011765:0.010441:0.005882:0.006526:0.011765:0.005882:0.007831:0.006526:0.011765:0.006526:0.009154:0.011765:0.005882:0.011765:0.010441:0.007831:0.011765:0.007831:0.010441:0.005882:0.011765:0.007831:0.011765:0.010441:0.010441:0.010441:0.011765:0.006526:0.011765:0.011765:0.005882
Interthread Communication:@0.117647:0.564662:0.588020:0.564662:0.588020:0.537872:0.117647:0.537872:0.015092:0.021581:0.012923:0.017224:0.017224:0.012923:0.021581:0.016526:0.017224:0.019412:0.021581:0.009706:0.028033:0.019412:0.032335:0.032335:0.021581:0.021581:0.010772:0.017224:0.019412:0.012923:0.010772:0.019412:0.021586
The preceding examples unconditionally blocked other threads from:@0.117647:0.595745:0.761026:0.595745:0.761026:0.579218:0.117647:0.579218:0.014357:0.011765:0.010441:0.005882:0.011765:0.007831:0.010441:0.010441:0.010441:0.011765:0.006526:0.011765:0.011765:0.005882:0.010441:0.011765:0.010441:0.018291:0.011765:0.006526:0.010441:0.009154:0.005882:0.011765:0.011765:0.010441:0.011765:0.011765:0.011765:0.006526:0.006526:0.006526:0.011765:0.011765:0.010441:0.006526:0.006526:0.011765:0.005882:0.011765:0.006526:0.011765:0.010441:0.011765:0.010441:0.011765:0.005882:0.011765:0.006526:0.011765:0.010441:0.007831:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.009154:0.005882:0.007831:0.007831:0.011765:0.018306
asynchronous access to certain methods. This use of the implicit monitors in:@0.117647:0.616655:0.836176:0.616655:0.836176:0.600127:0.117647:0.600127:0.010441:0.009154:0.011765:0.011765:0.010441:0.011765:0.007831:0.011765:0.011765:0.011765:0.011765:0.009154:0.005882:0.010441:0.010441:0.010441:0.010441:0.009154:0.009154:0.005882:0.006526:0.011765:0.005882:0.010441:0.010441:0.007831:0.006526:0.010441:0.006526:0.011765:0.005882:0.018291:0.010441:0.006526:0.011765:0.011765:0.011765:0.009154:0.005882:0.005882:0.014357:0.011765:0.006526:0.009154:0.005882:0.011765:0.009154:0.010441:0.005882:0.011765:0.007831:0.005882:0.006526:0.011765:0.010441:0.005882:0.006526:0.018291:0.011765:0.006526:0.006526:0.010441:0.006526:0.006526:0.005882:0.018291:0.011765:0.011765:0.006526:0.006526:0.011765:0.007831:0.009154:0.005882:0.006526:0.011765
Java objects is powerful, but you can achieve a more subtle level of control:@0.117647:0.637564:0.825696:0.637564:0.825696:0.621036:0.117647:0.621036:0.009154:0.010441:0.011765:0.010441:0.005882:0.011765:0.011765:0.006526:0.010441:0.010441:0.006526:0.009154:0.005882:0.006526:0.009154:0.005882:0.011765:0.011765:0.016985:0.010441:0.007831:0.007831:0.011765:0.006526:0.005882:0.005882:0.011765:0.011765:0.006526:0.005882:0.011765:0.011765:0.011765:0.005882:0.010441:0.010441:0.011765:0.005882:0.010441:0.010441:0.011765:0.006526:0.010441:0.011765:0.010441:0.005882:0.010441:0.005882:0.018291:0.011765:0.007831:0.010441:0.005882:0.009154:0.011765:0.011765:0.006526:0.006526:0.010441:0.005882:0.006526:0.010441:0.011765:0.010441:0.006526:0.005882:0.011765:0.007831:0.005882:0.010441:0.011765:0.011765:0.006526:0.007831:0.011765:0.006541
through interprocess communication. As you will see, this is especially easy in:@0.117647:0.658473:0.859044:0.658473:0.859044:0.641945:0.117647:0.641945:0.006526:0.011765:0.007831:0.011765:0.011765:0.011765:0.011765:0.005882:0.006526:0.011765:0.006526:0.010441:0.007831:0.011765:0.007831:0.011765:0.010441:0.010441:0.009154:0.009154:0.005882:0.010441:0.011765:0.018291:0.018291:0.011765:0.011765:0.006526:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.005882:0.016985:0.009154:0.005882:0.011765:0.011765:0.011765:0.005882:0.016985:0.006526:0.006526:0.006526:0.005882:0.009154:0.010441:0.010441:0.005882:0.005882:0.006526:0.011765:0.006526:0.009154:0.005882:0.006526:0.009154:0.005882:0.010441:0.009154:0.011765:0.010441:0.010441:0.006526:0.010441:0.006526:0.006526:0.011765:0.005882:0.010441:0.010441:0.009154:0.011765:0.005882:0.006526:0.011765
Java.:@0.117647:0.679382:0.165331:0.679382:0.165331:0.662855:0.117647:0.662855:0.009154:0.010441:0.011765:0.010441:0.005882
As discussed earlier, multithreading replaces event loop programming by:@0.145882:0.702109:0.834044:0.702109:0.834044:0.685582:0.145882:0.685582:0.016985:0.009154:0.005882:0.011765:0.006526:0.009154:0.010441:0.011765:0.009154:0.009154:0.010441:0.011765:0.005882:0.010441:0.010441:0.007831:0.006526:0.006526:0.010441:0.006893:0.005882:0.005882:0.018291:0.011765:0.006526:0.006526:0.006526:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.006526:0.011765:0.011765:0.005882:0.007831:0.010441:0.011765:0.006526:0.010441:0.010441:0.010441:0.009154:0.005882:0.010441:0.011765:0.010441:0.011765:0.006526:0.005882:0.006526:0.011765:0.011765:0.011765:0.005882:0.011765:0.007831:0.011765:0.011765:0.007831:0.010441:0.018291:0.018291:0.006526:0.011765:0.011765:0.005882:0.011765:0.011765
dividing your tasks into discrete, logical units. Threads also provide a secondary:@0.117647:0.723018:0.873419:0.723018:0.873419:0.706491:0.117647:0.706491:0.011765:0.006526:0.011765:0.006526:0.011765:0.006526:0.011765:0.011765:0.005882:0.011765:0.011765:0.011765:0.007831:0.005882:0.006526:0.010441:0.009154:0.011765:0.009154:0.005882:0.006526:0.011765:0.006526:0.011765:0.005882:0.011765:0.006526:0.009154:0.010441:0.007831:0.010441:0.006526:0.010441:0.005882:0.005882:0.006526:0.011765:0.011765:0.006526:0.010441:0.010441:0.006526:0.005882:0.011765:0.011765:0.006526:0.006526:0.009154:0.005882:0.005882:0.014357:0.011765:0.007831:0.010441:0.010441:0.011765:0.009154:0.005882:0.010441:0.006526:0.009154:0.011765:0.005882:0.011765:0.007831:0.011765:0.011765:0.006526:0.011765:0.010441:0.005882:0.010441:0.005882:0.009154:0.010441:0.010441:0.011765:0.011765:0.011765:0.010441:0.007831:0.011765
benefit: they do away with polling. Polling is usually implemented by a loop that:@0.117647:0.743927:0.879317:0.743927:0.879317:0.727400:0.117647:0.727400:0.011765:0.010441:0.011765:0.010441:0.007831:0.006526:0.006526:0.006526:0.005882:0.006526:0.011765:0.010441:0.011765:0.005882:0.011765:0.011765:0.005882:0.010441:0.016985:0.010441:0.011765:0.005882:0.016985:0.006526:0.006526:0.011765:0.005882:0.011765:0.011765:0.006526:0.006526:0.006526:0.011765:0.011765:0.005882:0.005882:0.013070:0.011765:0.006526:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.011765:0.009154:0.011765:0.010441:0.006526:0.006526:0.011765:0.005882:0.006526:0.018291:0.011765:0.006526:0.010441:0.018291:0.010441:0.011765:0.006526:0.010441:0.011765:0.005882:0.011765:0.011765:0.005882:0.010441:0.005882:0.006526:0.011765:0.011765:0.011765:0.005882:0.006526:0.011765:0.010441:0.006541
is used to check some condition repeatedly. Once the condition is true,:@0.117647:0.764836:0.780423:0.764836:0.780423:0.748309:0.117647:0.748309:0.006526:0.009154:0.005882:0.011765:0.009154:0.010441:0.011765:0.005882:0.006526:0.011765:0.005882:0.010441:0.011765:0.010441:0.010441:0.011765:0.005882:0.009154:0.011765:0.018291:0.010441:0.005882:0.010441:0.011765:0.011765:0.011765:0.006526:0.006526:0.006526:0.011765:0.011765:0.005882:0.007831:0.010441:0.011765:0.010441:0.010441:0.006526:0.010441:0.011765:0.006526:0.010239:0.005882:0.005882:0.016985:0.011765:0.010441:0.010441:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.011765:0.011765:0.011765:0.006526:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.006526:0.007831:0.011765:0.010441:0.005882
appropriate action is taken. This wastes CPU time. For example, consider the:@0.117647:0.785745:0.843958:0.785745:0.843958:0.769218:0.117647:0.769218:0.010441:0.011765:0.011765:0.007831:0.011765:0.011765:0.007831:0.006526:0.010441:0.006526:0.010441:0.005882:0.010441:0.010441:0.006526:0.006526:0.011765:0.011765:0.005882:0.006526:0.009154:0.005882:0.006526:0.010441:0.011765:0.010441:0.011765:0.005882:0.005882:0.014357:0.011765:0.006526:0.009154:0.005882:0.016985:0.010441:0.009154:0.006526:0.010441:0.009154:0.005882:0.015680:0.013070:0.016985:0.005882:0.006526:0.006526:0.018291:0.010441:0.005882:0.005882:0.013070:0.011765:0.007831:0.005882:0.010441:0.011765:0.010441:0.018291:0.011765:0.006526:0.010441:0.005882:0.005882:0.010441:0.011765:0.011765:0.009154:0.006526:0.011765:0.010441:0.007831:0.005882:0.006526:0.011765:0.010447
classic queuing problem, where one thread is producing some data and another is:@0.117647:0.806655:0.881249:0.806655:0.881249:0.790127:0.117647:0.790127:0.010441:0.006526:0.010441:0.009154:0.009154:0.006526:0.010441:0.005882:0.011765:0.011765:0.010441:0.011765:0.006526:0.011765:0.011765:0.005882:0.011765:0.007831:0.011765:0.011765:0.006526:0.010441:0.018291:0.005882:0.005882:0.016985:0.011765:0.010441:0.007831:0.010441:0.005882:0.011765:0.011765:0.010441:0.005882:0.006526:0.011765:0.007831:0.010441:0.010441:0.011765:0.005882:0.006526:0.009154:0.005882:0.011765:0.007831:0.011765:0.011765:0.011765:0.010441:0.006526:0.011765:0.011765:0.005882:0.009154:0.011765:0.018291:0.010441:0.005882:0.011765:0.010441:0.006526:0.010441:0.005882:0.010441:0.011765:0.011765:0.005882:0.010441:0.011765:0.011765:0.006526:0.011765:0.010441:0.007831:0.005882:0.006526:0.009153
consuming it. To make the problem more interesting, suppose that the producer:@0.117647:0.827564:0.863938:0.827564:0.863938:0.811036:0.117647:0.811036:0.010441:0.011765:0.011765:0.009154:0.011765:0.018291:0.006526:0.011765:0.011765:0.005882:0.006526:0.006526:0.005882:0.005882:0.012721:0.011765:0.005882:0.018291:0.010441:0.011765:0.010441:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.007831:0.011765:0.011765:0.006526:0.010441:0.018291:0.005882:0.018291:0.011765:0.007831:0.010441:0.005882:0.006526:0.011765:0.006526:0.010441:0.007831:0.010441:0.009154:0.006526:0.006526:0.011765:0.011765:0.005882:0.005882:0.009154:0.011765:0.011765:0.011765:0.011765:0.009154:0.010441:0.005882:0.006526:0.011765:0.010441:0.006526:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.007831:0.011765:0.011765:0.011765:0.010441:0.010441:0.007835
has to wait until the consumer is finished before it generates more data. In a:@0.117647:0.848473:0.830226:0.848473:0.830226:0.831945:0.117647:0.831945:0.011765:0.010441:0.009154:0.005882:0.006526:0.011765:0.005882:0.016985:0.010441:0.006526:0.006526:0.005882:0.011765:0.011765:0.006526:0.006526:0.006526:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.011765:0.011765:0.009154:0.011765:0.018291:0.010441:0.007831:0.005882:0.006526:0.009154:0.005882:0.007831:0.006526:0.011765:0.006526:0.009154:0.011765:0.010441:0.011765:0.005882:0.011765:0.010441:0.007831:0.011765:0.007831:0.010441:0.005882:0.006526:0.006526:0.005882:0.011765:0.010441:0.011765:0.010441:0.007831:0.010441:0.006526:0.010441:0.009154:0.005882:0.018291:0.011765:0.007831:0.010441:0.005882:0.011765:0.010441:0.006526:0.010441:0.005882:0.005882:0.007831:0.011765:0.005882:0.010447
polling system, the consumer would waste many CPU cycles while it waited for:@0.117647:0.869382:0.870795:0.869382:0.870795:0.852855:0.117647:0.852855:0.011765:0.011765:0.006526:0.006526:0.006526:0.011765:0.011765:0.005882:0.009154:0.011765:0.009154:0.006526:0.010441:0.018291:0.005882:0.005882:0.006526:0.011765:0.010441:0.005882:0.010441:0.011765:0.011765:0.009154:0.011765:0.018291:0.010441:0.007831:0.005882:0.016985:0.011765:0.011765:0.006526:0.011765:0.005882:0.016985:0.010441:0.009154:0.006526:0.010441:0.005882:0.018291:0.010441:0.011765:0.011765:0.005882:0.015680:0.013070:0.016985:0.005882:0.010441:0.011765:0.010441:0.006526:0.010441:0.009154:0.005882:0.016985:0.011765:0.006526:0.006526:0.010441:0.005882:0.006526:0.006526:0.005882:0.016985:0.010441:0.006526:0.006526:0.010441:0.011765:0.005882:0.007831:0.011765:0.007835
the producer to produce. Once the producer was finished, it would start polling,:@0.117647:0.890291:0.865570:0.890291:0.865570:0.873764:0.117647:0.873764:0.006526:0.011765:0.010441:0.005882:0.011765:0.007831:0.011765:0.011765:0.011765:0.010441:0.010441:0.007831:0.005882:0.006526:0.011765:0.005882:0.011765:0.007831:0.011765:0.011765:0.011765:0.010441:0.010441:0.005882:0.005882:0.016985:0.011765:0.010441:0.010441:0.005882:0.006526:0.011765:0.010441:0.005882:0.011765:0.007831:0.011765:0.011765:0.011765:0.010441:0.010441:0.007831:0.005882:0.016985:0.010441:0.009154:0.005882:0.007831:0.006526:0.011765:0.006526:0.009154:0.011765:0.010441:0.011765:0.005882:0.005882:0.006526:0.006526:0.005882:0.016985:0.011765:0.011765:0.006526:0.011765:0.005882:0.009154:0.006526:0.010441:0.007831:0.006526:0.005882:0.011765:0.011765:0.006526:0.006526:0.006526:0.011765:0.011765:0.005882